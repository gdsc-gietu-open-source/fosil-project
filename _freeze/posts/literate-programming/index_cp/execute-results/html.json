{
  "hash": "7c441ddbde64b0c38708420c24c9309d",
  "result": {
    "markdown": "---\ntitle: \"Literate programming\"\nauthor: \n  - name: Kyle Parrish\n    url: https://kparrish92.github.io/\n    affiliation: Rutgers University\n    affiliation-url: www.rutgers.edu\n  - name: Isabelle Chang\n    affiliation: Rutgers University\n    affiliation-url: www.rutgers.edu\ncitation: \n  url: https://fosil-project.github.io/literate-programming/index.html\ndate: \"2023-02-20\"\ncategories: [info, coding, literate programming]\nimage: \"literate_programming_wug.png\"\ndescription: |\n  Introduction to literate programming.\ncode-fold: show\ncode-tools: true\ncode-link: true\n---\n\n<div class='dropdown'>\n  <button class='btn-sm btn-secondary dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'>\n  Language\n  </button>\n  <ul class='dropdown-menu dropdown-menu-dark' aria-labelledby='dropdownMenuButton1'>\n  <li><a class='dropdown-item' href='/posts/literate-programming/index.html'>English</a></li>\n  <li><a class='dropdown-item' href='/posts/literate-programming/index_cp.html'>官話</a></li>\n  </ul>\n </div>\n\n\n# Overview\n\nLiterate programming refers to the integration of code and prose in a reproducible document.\nThis practice is not yet mainstream in linguistics, although it holds several advantages as opposed to traditional reporting methods.\nTraditionally, statistical analysis, plots, tables, citations and captions would be created and manually and inserted into a manuscript. \nOne potential issue with this approach is the increased probability of reported errors.\nFor example, a recent study found that...(Roettger analysis of Labphon).\nA literate programming approach to manuscript creation would plausibly reduce the quantity of these errors, and it would make the correct information traceable more often. \nAdditionally, updates to the data would be (almost) automatically integrated into a given manuscript if the necssary scripts are run again.\n\nThe present tutorial will provide an example of literate programming specifically for linguists by using an open dataset in linguistics and reported a mock analysis\nWhile the emphasis of this tutorial will be on creating a simple working example in Rmarkdown, it is important to note that literate programming can be applied within R to APA style manuscripts (see the Papaja package), in slideshows (see Xaringan) and in other programs entirely (qmd, python, jupitor notebooks)\n\n# Working example \n\nHere, we talk through an example of literate programming using open linguistics data.\nIn particular, we are using the `durationsGe` dataset in the `languageR` package.\nFor our example, we will report differences in the duration of dutch prefix \"ge\" by speaker sex. \n\nFirst, we load our libraries. \nBoth tidyverse and languageR are available on CRAN.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"languageR\")\nlibrary(\"tidyverse\")\nlibrary(\"brms\")\n```\n:::\n\n\n## Reporting descriptive statistics\n\nIn general all, inline reporting occurs in Rmardown between backticks, i.e., \\` \\`. \nSpecifically, you have to wrap the r code with `` `r ` `` to integrate it into your document. \nFor instance, if we want to report the overall mean for the column `DurationOfPrefix`, we can simply put r code such as, `mean(durationsGe$DurationOfPrefix)` between to back ticks like this:\n\n\n```{=html}\n<div class=\"sourceCode\">\n<pre class=\"sourceCode markdown\">\n<code class=\"sourceCode markdown\">\nThe mean duration is &#96;r mean(durationsGe$DurationOfPrefix)&#96;. \n</code>\n</pre>\n</div>\n```\n\n\nWhich would be rendered as: \n\n::: border\nThe mean duration is 0.1252515\n:::\n\n\nThere are several decimal points here, though! \nWe probably don't want that, so if we haven't rounded the data previously, we can do so inline by using the `round` function: \n\n\n```{=html}\n<div class=\"sourceCode\">\n<pre class=\"sourceCode markdown\">\n<code class=\"sourceCode markdown\">\nThe mean duration was &#96;r round(mean(durationsGe$DurationOfPrefix), digits = 2)&#96;. \n</code>\n</pre>\n</div>\n```\n\n\nNow the code is rendered in prose as: \n\n::: border\nThe mean duration was 0.13.\n:::\n\nAs you can see, this can get rather long in a hurry. \nAnother option is to use an code chunk to calculate summary statistics and assign them to objects. \nThen you can simply use the objects with inline chunks. \nFor instance, we likely also want to report how many participants are in our dataset. \nLet's do this and report it in prose. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_duration  <- round(mean(durationsGe$DurationOfPrefix), digits = 2)\nn_participants <- length(unique(durationsGe$Speaker))\n```\n:::\n\n```{=html}\n<div class=\"sourceCode\">\n<pre class=\"sourceCode markdown\">\n<code class=\"sourceCode markdown\">\nThere were &#96;r n_participants&#96; participants. \nThe mean duration was &#96;r mean_duration&#96;. \n</code>\n</pre>\n</div>\n```\n\n\n::: border\nThere were 132 participants. The mean duration was 0.13.\n:::\n\n## Reporting results of statistical models\n\nWe can also report the output statistical models and tests. \nTypically, the results of these tests can be stored in an object in R and extracted.\nI will provide an example with a t-test in R.\nFirst, we will run a t-test to see whether duration varies as a function of speaker sex:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt_test_object <- t.test(DurationOfPrefix ~ Sex, data = durationsGe)\nt_test_object\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWelch Two Sample t-test\n\ndata:  DurationOfPrefix by Sex\nt = -0.1949, df = 413.26, p-value = 0.8456\nalternative hypothesis: true difference in means between group female and group male is not equal to 0\n95 percent confidence interval:\n -0.009955279  0.008159221\nsample estimates:\nmean in group female   mean in group male \n           0.1249141            0.1258121 \n```\n:::\n:::\n\n\n\nFor a t-test, in APA guidelines we report degrees of freedom, the t-value, and the p-value. \nAll of these are actually stored in the object we just created, and we can automate the reporting process.\n\n<aside>\n**Note**: The degree of freedom in this dataset are exaggerated due to the nested structure of the data and this t-test serves as an example only\n</aside>\n\n**Degrees of Freedom** \n\n\n```{=html}\n<div class=\"sourceCode\">\n<pre class=\"sourceCode markdown\">\n<code class=\"sourceCode markdown\">\n&#96;r round(t_test_object$parameter, digits = 2)&#96. \n</code>\n</pre>\n</div>\n```\n\n\n::: border\n413.26\n:::\n\n**The t-value**\n\n\n\n```{=html}\n<div class=\"sourceCode\">\n<pre class=\"sourceCode markdown\">\n<code class=\"sourceCode markdown\">\n&#96;r round(t_test_object$statistic, digits = 2)&#96. \n</code>\n</pre>\n</div>\n```\n\n\n::: border\n-0.19\n:::\n\n**The p-value** \n\n\n```{=html}\n<div class=\"sourceCode\">\n<pre class=\"sourceCode markdown\">\n<code class=\"sourceCode markdown\">\n&#96;r round(t_test_object$p.value, digits = 2)&#96. \n</code>\n</pre>\n</div>\n```\n\n\n::: border\n0.85\n:::\n\n**All together**\n\n\n```{=html}\n<div class=\"sourceCode\">\n<pre class=\"sourceCode markdown\">\n<code class=\"sourceCode markdown\">\nt = (&#96;r round(t_test_object$parameter, digits = 2)&#96) =\n&#96;r round(t_test_object$statistic, digits = 2)&#96, p = \n&#96;r round(t_test_object$p.value, digits = 2)&#96.   \n</code>\n</pre>\n</div>\n```\n\n\n::: border\nt = (413.26) =\n-0.19, p = \n0.85.   \n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}